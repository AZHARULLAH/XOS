alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1]; //system call number

alias PID S9;
PID = (PTBR - 1024) / 8;

alias startPTEntry S15;
alias PTEntryCounter S14;
alias swapPageIndex S13;
alias TRUE S12;
TRUE = 1;

if (sysCallNo == 8) then // 8 for fork
	
	// find a PCB in the ready list of PCBs
	// newPID is index of the PCB (say PCBIndex)
	alias newPID S2;
	newPID = PID + 1;
	while ((newPID % 32) != PID) do
		if ([READY_LIST + (newPID % 32) * 32 + 1] == 0) then
			break;
		endif;
		newPID = newPID + 1;	
	endwhile;
	
	newPID = newPID % 32;
	
	if (newPID == PID) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	alias childPTBR S7;
	childPTBR = 1024 + newPID * 8;
	
	// check if there is one page free in memory
	
	alias counter S4;
	counter = 25;
	
	alias newStackLocation S3;
	
	while (counter < 64) do
		if ([MEM_LIST + counter] == 0) then
			newStackLocation = counter;
			[MEM_LIST + counter] = 1;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	
	if (counter == 64) then
	
		// no memory entry free
		// so swap one into disk and proceed
		// need to select a victim page 
		
		// find the entry that lead to the exception
		startPTEntry = childPTBR - 1018;	// 1018 = 1024 - 6
		
		while (TRUE == 1) do
			
			// keep doing until a victim page is selected
			// we have to start from the entry that caused the page fault
			
			PTEntryCounter = (startPTEntry + 2) % 256;
			
			while (PTEntryCounter != startPTEntry) do
				
				// check if page is being used for stack
				if (PTEntryCounter % 8 == 6) then
					PTEntryCounter = (PTEntryCounter + 2) % 256;
					continue;
				endif;
				
				// PTEntryCounter now points to the page number entry
				
				if ([PAGE_TABLE + PTEntryCounter + 1] == "01") then
					
					// we have a potential victim page
					// check if the memory page is shared or not
					
					if ([MEM_LIST + [PAGE_TABLE + PTEntryCounter]] > 1) then
						// page is shared						
						// update and continue
						PTEntryCounter = PTEntryCounter + 2;
						continue;
					endif;
					
					// we have an actual victim page
					
					// scan the memory copy of the disk free list for a free block
					// in the swap area
					
					swapPageIndex = 448;
					while (swapPageIndex < 512) do
						if ([DISK_LIST + swapPageIndex] == 0) then
							store([PAGE_TABLE + PTEntryCounter], swapPageIndex);
							// mark swap disk block as used
							[DISK_LIST + swapPageIndex] = 1;
							// store the index of the obtained page 
							newStackLocation = [PAGE_TABLE + PTEntryCounter];
							// mark PTBR entry to point to swap block
							[PAGE_TABLE + PTEntryCounter] = swapPageIndex;
							// set auxiliary information of page as invalid
							[PAGE_TABLE + PTEntryCounter + 1] = "00";
							break;						
						endif;
						swapPageIndex = swapPageIndex + 1;
					endwhile;
						
					if (swapPageIndex == 512) then
						// no place to swap the page to
						// make the process exit
						[physicalSP - 2] = -1;
						ireturn;
					endif;
					
					if (swapPageIndex != 512) then
						// we have a valid page index stored in newStackLocation
						// break out
						break;
					endif;					
						
				endif;
				
				if ([PAGE_TABLE + PTEntryCounter + 1] == "11") then
					
					// change auxiliary information
					// i.e. give second chance
					
					[PAGE_TABLE + PTEntryCounter + 1] = "01";
					
				endif;
				
				PTEntryCounter = (PTEntryCounter + 2) % 256;		
				
			endwhile;
			
			if (PTEntryCounter != startPTEntry) then
				// we have a valid page index stored in newStackLocation
				// so we can stop executing the loop
				break;
			endif;
			
		endwhile;
		
	endif;
	
	alias wordIndex S6;	// to copy from one page to another
	
	// copy the stack
	
	wordIndex = 0;
	while (wordIndex < 512) do
		[newStackLocation * 512 + wordIndex] = [[PTBR + 6] * 512 + wordIndex];
		wordIndex = wordIndex + 1;
	endwhile;
	
	// set fourth entry of child's PTBR as stack
	[childPTBR + 6] = newStackLocation;
	[childPTBR + 7] = "01";	
	
	// update other entries of child's PTBR
	
	counter = 0;
	
	while (counter < 3) do
	
		// copy the entries in the page table of parent's process
		// to that of child's process
		
		[childPTBR + counter * 2] = [PTBR + counter * 2];
		[childPTBR + counter * 2 + 1] = [PTBR + counter * 2 + 1];
		
		if ([PTBR + counter * 2 + 1] == "01" || [PTBR + counter * 2 + 1] == "11") then
			[MEM_LIST + [PTBR + counter * 2]] = [MEM_LIST + [PTBR + counter * 2]] + 1;
		endif;
		
		if ([PTBR + counter * 2 + 1] == "00" && [PTBR + counter * 2] > 447) then
			// indicates that code page resides in the disk in the swap area
			// at this block number
			[DISK_LIST + [PTBR + counter * 2]] = [DISK_LIST + [PTBR + counter * 2]] + 1;// this is used to indicate that the swap block is now shared by more than one process
			// commit the disk free list back into the disk from memory
			store(6, 20);
		endif;
		
		counter = counter + 1;
		
	endwhile;
	
	// set up entries of the child process' PCB
	
	alias childPCB S10;
	childPCB = READY_LIST + newPID * 32;
	
	// set the PID of the child process to that value
	[childPCB + 0] = newPID;
	
	[childPCB + 2] = BP;
	[childPCB + 3] = SP - 1;
	[childPCB + 4] = [physicalSP];
	[childPCB + 5] = childPTBR;
	[childPCB + 6] = 4;	
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	[childPCB + 31] = PID;
	
	// setting up PPOFT
	
	counter = 0;
	while (counter < 8) do
		[childPCB + 15 + counter * 2] = [READY_LIST + PID * 32 + 15 + counter * 2];	// pointer to SWOFT
		[childPCB + 15 + counter * 2 + 1] = [READY_LIST + PID * 32 + 15 + counter * 2 + 1];	// LSEEK position
		// increment the file open count in SWOFT
		// [READY_LIST + PID * 32 + 15 + counter * 2] is SWOFT Index
		if ([childPCB + 15 + counter * 2] != -1) then
			// entry is valid
			[FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [childPCB + 15 + counter * 2] * 2 + 1] + 1;
		endif;
		counter = counter + 1;
	endwhile;
	
	// set STATE of child to READY
	[childPCB + 1] = 1;
	
	[physicalSP - 2] = newPID;
	// return value for child is -2
	alias childPhysicalSP S8;
	childPhysicalSP = ([childPTBR + 2 * ((SP - 1) / 512)] * 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;
	
	//print "fork_done";
	
	ireturn;
	
endif;